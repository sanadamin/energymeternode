import http from 'http';
import express from 'express';
import bodyParser from 'body-parser';
import mongoose from 'mongoose';
import config from './config';
import routes from './routes';
import passport from 'passport';
import emailcontrol1 from './middleware/emailcontrol1'
import emailcontrol from './middleware/emailcontrol'
import emailcontrol2 from './middleware/emailcontrol2'
import Owner from './model/owner'
import Division from './model/divisions'
import DivisionOwner from './model/ownerdivisions'
var nodemailer = require('nodemailer');
var schedule = require('node-schedule');


const LocalStrategy = require('passport-local').Strategy;

let app = express();
app.server = http.createServer(app);

app.use(bodyParser.json({
    limit: config.bodyLimit
}));
app.use(passport.initialize());

let Account = require('./model/account');


passport.use(new LocalStrategy({
        usernameField: 'email',
        passwordField: 'password'
    },
    Account.authenticate()
));

passport.serializeUser(Account.serializeUser());
passport.deserializeUser(Account.deserializeUser());

//reset weekly update flag on each thursday at 23:00 
var x = schedule.scheduleJob('* 23 * * 4', function() {
    Division.find({}, (err, tasks) => {
        for(let task of tasks){
        if (err) { console.log(err) }
        if (task.weeklyupdate) {
            task.weeklyupdate = 'No'
        } else {
            task.set({ 'weeklyupdate': 'No' })
        }
        task.save((err) => {
            if (err) { console.log(err) }
        })
    }
    })
})




//send reminder on each Wednesday at 10:00
var y = schedule.scheduleJob('* 10 * * 3', function() {
    let emails = '';
    let msgarray = [];
    let emailarray = [];
    let subjectarray = [];
    Division.find({ 'weeklyupdate': 'No' }, (err, tasks) => {
    if (err) { console.log(err) }

    for (let task of tasks) {

        DivisionOwner.find({ name: task.taskownmer }, (err, owners) => {

            if (err) { console.log(err) }
            for (let owner of owners) {
                emails = '';

                for (let emp of owner.group) {
                    emails = emails + emp.email + ',';
                }
               
              emailarray.push(emails);
	      msgarray.push( 'Reminder of ' + task.taskname + ' that has not been updated yet, appreciate to update on Thursday before 2:00pm');
              subjectarray.push('Reminder');


                
            }
        })
    }
emailcontrol2.sendEmail(emailarray, msgarray,subjectarray);

})
})


emailcontrol2.sendEmail(['s.amin@umniah.com'], ['test'],['tesing']);


var j = schedule.scheduleJob('43
 19 * * *', function(){
   let emailarray = [];
        let msgarray = [];
        let subjectarray = []; 
Division.find({}, (err, tasks) => {
        let date = new Date();
	
console.log('1111111111111111111111111111111');         
        for (let i of tasks) {
            let ddate = new Date(i.duedate);
            let days = Math.ceil((date.getTime() - ddate.getTime()) / (1000 * 3600 * 24));
        
            if (days > 0) {
                DivisionOwner.findOne({ 'name': i.taskownmer }, (err, div) => {
                    if (err) { console.log(err) }
        
                    Owner.find({ 'auth': 'Admin' }, (err, owners) => {
                        let emails = '';
                        for (let j of div.group) {
                            emails = emails + j.email + ',';
                        }
                        for (let email of owners) {
                            emails = emails + email.email + ',';
                        }
                         let lastupdate = '';
                        for (let ent of i.effectedentities) {
                            lastupdate = lastupdate + '<tr><td> Entity Name </td><td>' + ent.entityname + '</td></tr><tr><td>Entity Update</td><td>' + ent.entityupdate + '</td></tr>'
                        }

                        let taskbody = '<div><table border=1><tr style="background-color: #D9e838"><th>Description</th><th>Value</th></tr><tr><td>Task Name</td><td>' + i.taskname + '</td></tr><tr><td>Delay Amount</td><td>' + Math.abs(Math.ceil((date.getTime() - ddate.getTime()) / (1000 * 3600 * 24))) + 'Days' + '</td></tr>' + lastupdate + '</table>'
                        emailarray.push(emails);
			msgarray.push(taskbody);
			subjectarray.push('OverDue');
			

                    });
                });

            }

        }
 	emailcontrol2.sendEmail(emailarray, msgarray,subjectarray);

    })
});
// var interval = setInterval(function(str1, str2) {
//     console.log(str1 + " " + str2);
// }, 1000, "Hello", "How are you!");
// api routes v1


app.server.listen(config.port);

app.use('/apitask/v1', routes);

console.log(`Started on port ${app.server.address().port}`);

export default app;
